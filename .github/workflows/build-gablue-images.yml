name: build-gablue-images
on:
  pull_request:
    branches:
      - main                        # Déclenché sur les pull requests vers la branche main
  schedule:
    - cron: "00 06 * * *"          # Construction quotidienne à 06:00 UTC
  push:
    branches:
      - main                        # Déclenché sur les push vers la branche main
  workflow_dispatch:                # Peut être lancé manuellement via l'interface GitHub

# Variables d'environnement globales (communes à toutes les images)
env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"  # Registre où les images seront poussées (GHCR)

jobs:
  build_push:
    name: Build and push images     # Nom de la tâche affichée dans GitHub Actions
    runs-on: ubuntu-24.04           # Système d'exploitation utilisé pour exécuter le job
    # Condition : exécution uniquement si commit contient "[build]" ou pour les autres événements
    if: github.event_name != 'push' || contains(github.event.head_commit.message, '[build]')

    # Stratégie de matrice pour construire les images en parallèle
    strategy:
      matrix:
        image:
          - name: "gablue-main"      # Nom de l'image principale
            desc: "Gablue main image"  # Description de l'image
            variant: "main"          # Variante (main)
            source_image: "kinoite"  # Image source (kinoite)
            source_suffix: "-main"   # Suffixe de l'image source
            fedora_version: "41"     # Version de Fedora
            kernel_type: "bazzite"   # Type de kernel
            kernel_version: "6.13.7-101"  # Version spécifique du kernel
          - name: "gablue-nvidia"    # Nom de l'image NVIDIA
            desc: "Gablue nvidia image"  # Description de l'image
            variant: "nvidia"        # Variante (nvidia)
            source_image: "kinoite"  # Image source (kinoite)
            source_suffix: "-main"   # Suffixe de l'image source
            fedora_version: "41"     # Version de Fedora
            kernel_type: "bazzite"   # Type de kernel
            kernel_version: "6.13.7-101"  # Version spécifique du kernel
          - name: "gablue-nvidia-open"  # Nom de l'image NVIDIA Open
            desc: "Gablue nvidia-open image"  # Description de l'image
            variant: "nvidia-open"   # Variante (nvidia-open)
            source_image: "kinoite"  # Image source (kinoite)
            source_suffix: "-main"   # Suffixe de l'image source
            fedora_version: "41"     # Version de Fedora
            kernel_type: "bazzite"   # Type de kernel
            kernel_version: "6.13.7-101"  # Version spécifique du kernel

    permissions:
      contents: read                # Permissions en lecture pour le contenu du dépôt
      packages: write               # Permissions en écriture pour publier les paquets (images)
      id-token: write               # Permissions pour gérer les jetons d'identification

    steps:
      # Étape 1 : Checkout du dépôt pour accéder aux fichiers
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4   # Utilise la version 4 de l'action checkout

      # Étape 2 : Optimisation de l'espace de construction
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v9  # Supprime les logiciels inutiles pour libérer de l'espace

      # Étape 3 : Génération des tags pour chaque image
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Création d'un horodatage pour l'historique des versions
          TIMESTAMP="$(date +%Y%m%d)"           # Format AAAAMMJJ
          TIMESTAMPWT="$(date -d '+2 hours' +%Y%m%d-%Hh%M)"  # Avec heure +2h pour différenciation
          COMMIT_TAGS=()                        # Tableau pour les tags des commits
          BUILD_TAGS=()                         # Tableau pour les tags des builds
          SHA_SHORT="${GITHUB_SHA::7}"          # Hash court du commit (7 premiers caractères)
          COMMIT_TAGS+=("pr-${{ github.event.number }}")  # Tag pour les pull requests
          COMMIT_TAGS+=("${SHA_SHORT}")         # Tag avec le hash court
          for TAG in "${BUILD_TAGS[@]}"; do     # Ajout des horodatages aux tags existants
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done
          BUILD_TAGS+=("${TIMESTAMP}")          # Tag avec la date
          BUILD_TAGS+=("${TIMESTAMPWT}")        # Tag avec date et heure
          BUILD_TAGS+=("latest")                # Tag latest pour la version la plus récente
          # Sélection des tags selon l'événement (PR ou push/schedule)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi
          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done
          # Exportation des tags pour les étapes suivantes
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT
          echo "alias_date=${TIMESTAMPWT}" >> $GITHUB_OUTPUT

      # Étape 4 : Ajout des métadonnées pour l'image
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ matrix.image.name }}          # Nom de l'image depuis la matrice
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.description=${{ matrix.image.desc }}  # Description depuis la matrice
            org.opencontainers.image.title=${{ matrix.image.name }}        # Titre depuis la matrice

      # Étape 5 : Construction de l'image avec buildah
      - name: Build Image
        id: build_image
        shell: bash
        run: |
          sudo buildah build \
            --file "Containerfile-gablue" \  # Fichier Containerfile utilisé pour la construction
            --format "docker" \              # Format de l'image générée
            --build-arg KERNEL_VERSION="${{ matrix.image.kernel_version }}" \  # Version du kernel
            --build-arg VARIANT="${{ matrix.image.variant }}" \       # Variante de l'image
            --build-arg SOURCE_IMAGE="${{ matrix.image.source_image }}" \  # Image source
            --build-arg SOURCE_SUFFIX="${{ matrix.image.source_suffix }}" \  # Suffixe de l'image
            --build-arg FEDORA_VERSION="${{ matrix.image.fedora_version }}" \  # Version de Fedora
            --build-arg KERNEL_TYPE="${{ matrix.image.kernel_type }}" \  # Type de kernel
            --tag raw-img .                  # Tag temporaire pour l'image construite

      # Étape 6 : Rechunk de l'image pour optimisation
      - name: Rechunk Image
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.1
        with:
          ref: "raw-img"                   # Référence de l'image brute
          prev-ref: "${{ env.IMAGE_REGISTRY }}/${{ matrix.image.name }}:latest"  # Référence précédente pour optimisation
          skip_compression: true           # Pas de compression pour accélérer
          version: "${{ steps.generate-tags.outputs.alias_date }}"  # Version avec horodatage
          rechunk: "ghcr.io/hhd-dev/rechunk:v0.8.6"  # Version de l'outil rechunk

      # Étape 7 : Chargement et tag de l'image dans podman
      - name: Load in podman and tag
        run: |
          IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})  # Récupération de l'image rechunkée
          sudo rm -rf ${{ steps.rechunk.outputs.output }}        # Suppression des fichiers temporaires
          podman tag $IMAGE ${{ matrix.image.name }}:${{ steps.generate-tags.outputs.alias_tags }}  # Tag personnalisé
          podman tag $IMAGE ${{ matrix.image.name }}:${{ steps.generate-tags.outputs.alias_date }}  # Tag avec date
          podman tag $IMAGE ${{ matrix.image.name }}:latest      # Tag latest
          podman tag $IMAGE rechunked-img                        # Tag pour vérification Secureboot

      # Étape 8 : Vérification de Secureboot
      - name: Check Secureboot
        shell: bash
        run: |
          set -x
          # Installation des outils nécessaires si absents
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl
          fi
          # Extraction du kernel pour vérification
          TMP=$(podman create rechunked-img bash)
          podman cp $TMP:/usr/lib/modules/${{ matrix.image.kernel_version }}.${{ matrix.image.kernel_type }}.fc${{ matrix.image.fedora_version }}.x86_64/vmlinuz .
          podman rm $TMP
          sbverify --list vmlinuz          # Liste des signatures du kernel
          # Téléchargement des certificats pour vérification
          curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
          curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          # Vérification des signatures
          sbverify --cert kernel-sign.crt vmlinuz || exit 1
          sbverify --cert akmods.crt vmlinuz || exit 1

      # Étape 9 : Conversion du registre en minuscules (contournement d'un bug GHCR)
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}  # Conversion en minuscules pour compatibilité GHCR

      # Étape 10 : Connexion au registre GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io              # Registre cible
          username: ${{ github.actor }}  # Utilisateur GitHub
          password: ${{ secrets.GITHUB_TOKEN }}  # Token d'authentification

      # Étape 11 : Pousser l'image vers GHCR
      - name: Push To GHCR
        uses: Wandalen/wretry.action@v3.8.0
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}      # Utilisateur pour le push
          REGISTRY_PASSWORD: ${{ github.token }}  # Mot de passe/token
        with:
          action: redhat-actions/push-to-registry@v2  # Action pour pousser l'image
          attempt_limit: 3               # Nombre maximum de tentatives
          attempt_delay: 15000           # Délai entre tentatives (15 secondes)
          with: |
            image: ${{ matrix.image.name }}  # Nom de l'image à pousser
            tags: ${{ steps.generate-tags.outputs.alias_tags }}  # Tags générés
            registry: ${{ steps.registry_case.outputs.lowercase }}  # Registre en minuscules
            username: ${{ env.REGISTRY_USER }}  # Nom d'utilisateur
            password: ${{ env.REGISTRY_PASSWORD }}  # Mot de passe

      # Étape 12 : Installation de Cosign pour signature (optionnel)
      - uses: sigstore/cosign-installer@v3.8.1
        if: github.event_name != 'pull_request'  # Exécuté uniquement hors pull requests

      # Étape 13 : Signature de l'image
      - name: Sign container image
        if: github.event_name != 'pull_request'  # Exécuté uniquement hors pull requests
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ matrix.image.name }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}  # Digest de l'image poussée
          COSIGN_EXPERIMENTAL: false       # Mode expérimental désactivé
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}  # Clé privée pour la signature
