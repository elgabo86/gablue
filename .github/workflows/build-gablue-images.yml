name: build-gablue-images
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: "00 06 * * *"
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"

jobs:
  build_push:
    name: build-gablue-images
    runs-on: ubuntu-24.04
    if: github.event_name != 'push' || contains(github.event.head_commit.message, '[build]')

    strategy:
      fail-fast: false
      matrix:
        image:
          - name: "gablue-main"
            desc: "Gablue main image"
            variant: "main"
            source_image: "kinoite"
            source_suffix: "-main"
            fedora_version: "43"
            kernel_type: "bazzite"
            kernel_version: ""
          - name: "gablue-nvidia"
            desc: "Gablue nvidia image"
            variant: "nvidia"
            source_image: "kinoite"
            source_suffix: "-main"
            fedora_version: "43"
            kernel_type: "bazzite"
            kernel_version: ""
          - name: "gablue-nvidia-open"
            desc: "Gablue nvidia-open image"
            variant: "nvidia-open"
            source_image: "kinoite"
            source_suffix: "-main"
            fedora_version: "43"
            kernel_type: "bazzite"
            kernel_version: ""
          - name: "gablue-main-test"
            desc: "Gablue main test image with Mesa Terra"
            variant: "main"
            source_image: "kinoite"
            source_suffix: "-main"
            fedora_version: "43"
            kernel_type: "bazzite"
            kernel_version: ""

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      # Étape pour récupérer la version du kernel via skopeo inspect
      - name: Get latest kernel version
        id: get_kernel_version
        if: matrix.image.kernel_version == ''
        run: |
          # Construire l'URI du conteneur kernel
          KERNEL_URI="ghcr.io/bazzite-org/kernel-bazzite:latest-f${{ matrix.image.fedora_version }}-x86_64"

          echo "Kernel URI: $KERNEL_URI"

          # Utiliser skopeo inspect pour récupérer les labels
          KERNEL_INFO=$(skopeo inspect "docker://$KERNEL_URI")
          if [[ -z "$KERNEL_INFO" ]]; then
            echo "Erreur : Impossible de récupérer les informations du kernel depuis $KERNEL_URI"
            exit 1
          fi

          # Extraire la version du kernel depuis les labels (ou utiliser "latest" comme fallback)
          KERNEL_VERSION=$(echo "$KERNEL_INFO" | jq -r '.config.config.Labels["org.bazzite.kernel.version"] // "latest"')

          # Fallback: si le label n'existe pas, on utilise "latest" et on extraira depuis le tag plus tard
          if [[ "$KERNEL_VERSION" == "null" ]] || [[ -z "$KERNEL_VERSION" ]]; then
            KERNEL_VERSION="latest"
          fi

          echo "LATEST_TAG=$KERNEL_URI" >> $GITHUB_OUTPUT
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_OUTPUT

      # Étape pour définir la version du noyau
      - name: Determine kernel version
        id: determine_kernel_version
        shell: bash
        run: |
          if [[ -n "${{ matrix.image.kernel_version }}" ]]; then
            KERNEL_VERSION="${{ matrix.image.kernel_version }}"
          elif [[ -n "${{ steps.get_kernel_version.outputs.KERNEL_VERSION }}" ]]; then
            KERNEL_VERSION="${{ steps.get_kernel_version.outputs.KERNEL_VERSION }}"
          else
            echo "Erreur : Aucune version du noyau spécifiée ou trouvée pour Fedora ${{ matrix.image.fedora_version }}"
            exit 1
          fi
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_OUTPUT

      # Checkout du dépôt
      - name: Checkout repository
        uses: actions/checkout@v5

      # Optimisation de l'espace
      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v8

      # Génération des tags
      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          TIMESTAMPWT="$(date -d '+2 hours' +%Y%m%d-%Hh%M)"
          COMMIT_TAGS=()
          BUILD_TAGS=()
          SHA_SHORT="${GITHUB_SHA::7}"
          COMMIT_TAGS+=("pr-${{ github.event.number }}")
          COMMIT_TAGS+=("${SHA_SHORT}")
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done
          BUILD_TAGS+=("${TIMESTAMP}")
          BUILD_TAGS+=("${TIMESTAMPWT}")
          BUILD_TAGS+=("latest")
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi
          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT
          echo "alias_date=${TIMESTAMPWT}" >> $GITHUB_OUTPUT

      # Métadonnées de l'image
      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ matrix.image.name }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.description=${{ matrix.image.desc }}
            org.opencontainers.image.title=${{ matrix.image.name }}

      # Construction de l'image
      - name: Build Image
        id: build_image
        shell: bash
        run: |
          # Choisir le bon Containerfile selon la variante
          if [[ "${{ matrix.image.name }}" == "gablue-main-test" ]]; then
            CONTAINERFILE="Containerfile-gablue-test"
          else
            CONTAINERFILE="Containerfile-gablue"
          fi
          
          sudo buildah build \
            --file "$CONTAINERFILE" \
            --format "docker" \
            --build-arg KERNEL_VERSION="${{ steps.determine_kernel_version.outputs.KERNEL_VERSION }}" \
            --build-arg VARIANT="${{ matrix.image.variant }}" \
            --build-arg SOURCE_IMAGE="${{ matrix.image.source_image }}" \
            --build-arg SOURCE_SUFFIX="${{ matrix.image.source_suffix }}" \
            --build-arg FEDORA_VERSION="${{ matrix.image.fedora_version }}" \
            --build-arg KERNEL_TYPE="${{ matrix.image.kernel_type }}" \
            --tag raw-img .

      # Rechunk de l'image
      - name: Rechunk Image
        id: rechunk
        uses: hhd-dev/rechunk@v1.2.4
        with:
          ref: "raw-img"
          prev-ref: "${{ env.IMAGE_REGISTRY }}/${{ matrix.image.name }}:latest"
          skip_compression: true
          version: "${{ steps.generate-tags.outputs.alias_date }}"
          rechunk: "ghcr.io/hhd-dev/rechunk:v1.2.1"

      # Chargement et tag
      - name: Load in podman and tag
        run: |
          IMAGE=$(podman pull ${{ steps.rechunk.outputs.ref }})
          sudo rm -rf ${{ steps.rechunk.outputs.output }}
          podman tag $IMAGE ${{ matrix.image.name }}:${{ steps.generate-tags.outputs.alias_tags }}
          podman tag $IMAGE ${{ matrix.image.name }}:${{ steps.generate-tags.outputs.alias_date }}
          podman tag $IMAGE ${{ matrix.image.name }}:latest
          podman tag $IMAGE rechunked-img

      # Vérification Secureboot
      - name: Check Secureboot
        shell: bash
        run: |
          set -x
          if [[ ! $(command -v sbverify) || ! $(command -v curl) || ! $(command -v openssl) ]]; then
            sudo apt update
            sudo apt install sbsigntool curl openssl
          fi
          TMP=$(podman create rechunked-img bash)
          podman cp $TMP:/usr/lib/modules/${{ steps.determine_kernel_version.outputs.KERNEL_VERSION }}.${{ matrix.image.kernel_type }}.fc${{ matrix.image.fedora_version }}.x86_64/vmlinuz .
          podman rm $TMP
          sbverify --list vmlinuz
          curl --retry 3 -Lo kernel-sign.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key.der
          curl --retry 3 -Lo akmods.der https://github.com/ublue-os/kernel-cache/raw/main/certs/public_key_2.der
          openssl x509 -in kernel-sign.der -out kernel-sign.crt
          openssl x509 -in akmods.der -out akmods.crt
          sbverify --cert kernel-sign.crt vmlinuz || exit 1
          sbverify --cert akmods.crt vmlinuz || exit 1

      # Conversion registre en minuscules
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Connexion à GHCR
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Pousser l'image
      - name: Push To GHCR
        uses: Wandalen/wretry.action@v3.8.0
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          action: redhat-actions/push-to-registry@v2
          attempt_limit: 3
          attempt_delay: 15000
          with: |
            image: ${{ matrix.image.name }}
            tags: ${{ steps.generate-tags.outputs.alias_tags }}
            registry: ${{ steps.registry_case.outputs.lowercase }}
            username: ${{ env.REGISTRY_USER }}
            password: ${{ env.REGISTRY_PASSWORD }}

      # Installation Cosign
      - uses: sigstore/cosign-installer@v4.0.0
        if: github.event_name != 'pull_request'

      # Signature de l'image
      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ matrix.image.name }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.outputs && fromJSON(steps.push.outputs.outputs).digest }}
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
