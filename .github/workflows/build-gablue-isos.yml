name: build-gablue-isos

# Ajout des permissions nécessaires
permissions:
  contents: write  # Pour créer et supprimer des releases

on:
  schedule:
    - cron: "0 0 */5 * *"  # Tous les 5 jours à minuit UTC
  workflow_dispatch:       # Déclenchement manuel

jobs:
  build-and-upload-isos:
    name: build-gablue-isos
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        iso:
          - name: "gablue-main"
            repo: "ghcr.io/elgabo86"
            tag: "latest"
            version: "41"
            variant: "Kinoite"
          - name: "gablue-nvidia"
            repo: "ghcr.io/elgabo86"
            tag: "latest"
            version: "41"
            variant: "Kinoite"
          - name: "gablue-nvidia-open"
            repo: "ghcr.io/elgabo86"
            tag: "latest"
            version: "41"
            variant: "Kinoite"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build ISO
        uses: jasonn3/build-container-installer@main
        id: build
        with:
          arch: "x86_64"
          image_name: ${{ matrix.iso.name }}
          image_repo: ${{ matrix.iso.repo }}
          image_tag: ${{ matrix.iso.tag }}
          version: ${{ matrix.iso.version }}
          variant: ${{ matrix.iso.variant }}
          iso_name: ${{ matrix.iso.name }}-${{ matrix.iso.tag }}-${{ matrix.iso.version }}.iso

      - name: Upload ISO to GoFile.io
        id: upload
        run: |
          ISO_PATH="${{ steps.build.outputs.iso_path }}"
          ISO_NAME="${{ matrix.iso.name }}"
          RESPONSE=$(curl -F "file=@$ISO_PATH" https://store1.gofile.io/uploadFile)
          LINK=$(echo "$RESPONSE" | grep -o 'https://gofile.io/d/[a-zA-Z0-9]\+' | head -n 1)
          if [ -n "$LINK" ]; then
            echo "Download link for $ISO_NAME: $LINK"
            echo "download_link=$LINK" >> $GITHUB_OUTPUT
          else
            echo "Échec de l’upload : $RESPONSE"
            exit 1
          fi

    outputs:
      gablue_main_link: ${{ steps.upload.outputs.download_link }}  # Matrix "gablue-main"
      gablue_nvidia_link: ${{ steps.upload.outputs.download_link }}  # Matrix "gablue-nvidia"
      gablue_nvidia_open_link: ${{ steps.upload.outputs.download_link }}  # Matrix "gablue-nvidia-open"

  create-release:
    needs: build-and-upload-isos
    runs-on: ubuntu-24.04
    steps:
      - name: Delete previous release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/latest-iso" | jq -r '.id')
          if [ "$RELEASE_ID" != "null" ]; then
            curl -s -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
            echo "Previous release deleted"
          else
            echo "No previous release found"
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "latest-iso"
          release_name: "Latest ISO Release"
          body: |
            Téléchargez les ISOs ici (valides 7 jours sans téléchargement) :
            - **gablue-main**: ${{ needs.build-and-upload-isos.outputs.gablue_main_link }}
            - **gablue-nvidia**: ${{ needs.build-and-upload-isos.outputs.gablue_nvidia_link }}
            - **gablue-nvidia-open**: ${{ needs.build-and-upload-isos.outputs.gablue_nvidia_open_link }}
          draft: false
          prerelease: false
