#!/bin/bash

# Script pour connecter les manettes via Bluetooth avec kdialog

# Fichier de verrouillage global et fichier temporaire
LOCK_FILE="/tmp/sync-gamepad.lock"
SCAN_LOG="/tmp/sync-gamepad-log-$$"

# Vérification des dépendances
check_dependency() {
    if ! command -v "$1" >/dev/null 2>&1; then
        echo "Erreur : $1 n'est pas installé. Installez $2 avec : sudo rpm-ostree install $2"
        exit 1
    fi
}
check_dependency "bluetoothctl" "bluez"
check_dependency "kdialog" "kdialog"
check_dependency "stdbuf" "coreutils"
check_dependency "flock" "util-linux"
check_dependency "timeout" "coreutils"

# Tente d'obtenir un verrou exclusif
exec 200>"$LOCK_FILE"
if ! flock -n 200; then
    echo "Une autre instance du script est déjà en cours d'exécution."
    exit 1
fi

# Fonction de nettoyage
cleanup() {
    echo "Nettoyage..."
    kill "$SCAN_PID" 2>/dev/null
    kill "$KDIALOG_PID" 2>/dev/null
    bluetoothctl scan off >/dev/null 2>&1
    bluetoothctl discoverable off >/dev/null 2>&1
    rm -f "$SCAN_LOG"
    exit 0
}
trap cleanup EXIT INT TERM

# Vérifie et active Bluetooth
if ! bluetoothctl show | grep -q "Powered: yes"; then
    echo "Activation de Bluetooth..."
    bluetoothctl power off >/dev/null 2>&1
    sleep 0.5
    bluetoothctl power on >/dev/null 2>&1
    sleep 0.5
fi

# Rend l'appareil découvrable
echo "Rendre l'appareil découvrable..."
bluetoothctl discoverable on >/dev/null 2>&1

# Initialise les compteurs de manettes
CONNECTED_CONTROLLERS=0
DS4_COUNT=0
DUALSENSE_COUNT=0
WIIU_PRO_COUNT=0
SWITCH_PRO_COUNT=0
JOYCON_LEFT_COUNT=0
JOYCON_RIGHT_COUNT=0
CONTROLLER_LIST=""
PROCESSED_DEVICES=""

# Boîte de dialogue KDE initiale
kdialog --title "Connexion des manettes (PID $$)" --msgbox "En attente de manettes...\nNombre de manettes connectées : $CONNECTED_CONTROLLERS\n\nMettez vos manettes en mode pairing (Share + PS pour DS4, PS + Create pour DualSense).\nCliquez sur 'Arrêter' pour stopper.\n\nNote : Les manettes pairées déconnectées seront supprimées et repairées." --ok-label "Arrêter" &
KDIALOG_PID=$!

# Lance le scan Bluetooth avec timeout
echo "Lancement du scan pour détecter les manettes (durée : 1 heure)..."
stdbuf -oL bluetoothctl --timeout 60 scan on > "$SCAN_LOG" 2>&1 &
SCAN_PID=$!
sleep 2

# Boucle principale pour détecter et connecter les manettes
while kill -0 "$KDIALOG_PID" 2>/dev/null; do
    # Extrait tous les appareils détectés dans le scan
    devices=$(cat "$SCAN_LOG" | grep -oP '(?<=Device )([0-9A-Fa-f:]{17})' | sort -u)
    has_controller=false

    if [ -n "$devices" ]; then
        echo "Appareils détectés dans le scan : $devices"
        for device in $devices; do
            # Ignore les appareils déjà connectés avec succès ou déjà traités
            if echo "$PROCESSED_DEVICES" | grep -q "$device" || bluetoothctl info "$device" | grep -q "Connected: yes"; then
                continue
            fi

            device_name=$(bluetoothctl info "$device" | grep "Name" | cut -d ' ' -f 2-)
            if echo "$device_name" | grep -q "Wireless Controller\|DualSense Wireless Controller\|Nintendo RVL-CNT-01-TR\|Pro Controller\|Joy-Con \(L\)\|Joy-Con \(R\)"; then
                has_controller=true
                echo "Manette détectée dans le scan : $device_name ($device)"

                # Si pairée mais non connectée, supprimer et repairer immédiatement
                if bluetoothctl info "$device" | grep -q "Paired: yes" && ! bluetoothctl info "$device" | grep -q "Connected: yes"; then
                    echo "Manette $device pairée mais non connectée, suppression et nouveau pairing forcés..."
                    bluetoothctl remove "$device" >/dev/null 2>&1
                    sleep 1
                    echo "Tentative de pairing avec $device..."
                    bluetoothctl pair "$device" >/dev/null 2>&1
                    sleep 0.5
                    if ! bluetoothctl info "$device" | grep -q "Paired: yes"; then
                        echo "Premier pairing échoué, nouvelle tentative pour $device..."
                        bluetoothctl pair "$device" >/dev/null 2>&1
                        sleep 0.5
                    fi
                # Si non pairée, tenter un pairing initial
                elif ! bluetoothctl info "$device" | grep -q "Paired: yes"; then
                    echo "Manette $device non pairée, tentative de pairing..."
                    bluetoothctl pair "$device" >/dev/null 2>&1
                    sleep 0.5
                fi

                # Tentative de connexion si pairée
                if bluetoothctl info "$device" | grep -q "Paired: yes"; then
                    echo "Tentative de connexion à $device..."
                    bluetoothctl trust "$device" >/dev/null 2>&1
                    sleep 0.2
                    timeout 5 bluetoothctl connect "$device" >/dev/null 2>&1
                    sleep 0.5
                    if bluetoothctl info "$device" | grep -q "Connected: yes"; then
                        echo "Connexion réussie à $device_name ($device) !"
                        CONNECTED_CONTROLLERS=$((CONNECTED_CONTROLLERS + 1))

                        # Mise à jour des compteurs par type
                        case "$device_name" in
                            *"DualSense Wireless Controller"*) DUALSENSE_COUNT=$((DUALSENSE_COUNT + 1)) ;;
                            *"Wireless Controller"*) DS4_COUNT=$((DS4_COUNT + 1)) ;;
                            *"Nintendo RVL-CNT-01-TR"*) WIIU_PRO_COUNT=$((WIIU_PRO_COUNT + 1)) ;;
                            *"Pro Controller"*) SWITCH_PRO_COUNT=$((SWITCH_PRO_COUNT + 1)) ;;
                            *"Joy-Con (L)"*) JOYCON_LEFT_COUNT=$((JOYCON_LEFT_COUNT + 1)) ;;
                            *"Joy-Con (R)"*) JOYCON_RIGHT_COUNT=$((JOYCON_RIGHT_COUNT + 1)) ;;
                        esac

                        # Construction de la liste des manettes
                        CONTROLLER_LIST=""
                        [ "$DS4_COUNT" -gt 0 ] && CONTROLLER_LIST="${CONTROLLER_LIST}${DS4_COUNT}x DS4\n"
                        [ "$DUALSENSE_COUNT" -gt 0 ] && CONTROLLER_LIST="${CONTROLLER_LIST}${DUALSENSE_COUNT}x DualSense\n"
                        [ "$WIIU_PRO_COUNT" -gt 0 ] && CONTROLLER_LIST="${CONTROLLER_LIST}${WIIU_PRO_COUNT}x Wii U Pro Controller\n"
                        [ "$SWITCH_PRO_COUNT" -gt 0 ] && CONTROLLER_LIST="${CONTROLLER_LIST}${SWITCH_PRO_COUNT}x Switch Pro Controller\n"
                        [ "$JOYCON_LEFT_COUNT" -gt 0 ] && CONTROLLER_LIST="${CONTROLLER_LIST}${JOYCON_LEFT_COUNT}x Joy-Con Gauche\n"
                        [ "$JOYCON_RIGHT_COUNT" -gt 0 ] && CONTROLLER_LIST="${CONTROLLER_LIST}${JOYCON_RIGHT_COUNT}x Joy-Con Droite\n"
                        CONTROLLER_LIST=$(echo -e "$CONTROLLER_LIST" | sed '/^$/d')

                        # Mise à jour de la fenêtre kdialog
                        kill "$KDIALOG_PID" 2>/dev/null
                        kdialog --title "Connexion des manettes (PID $$)" --msgbox "En attente de manettes...\nNombre de manettes connectées : $CONNECTED_CONTROLLERS\nListe des manettes connectées :\n$CONTROLLER_LIST\n\nMettez vos manettes en mode pairing (Share + PS pour DS4, PS + Create pour DualSense).\nCliquez sur 'Arrêter' pour stopper.\n\nNote : Les manettes pairées déconnectées seront supprimées et repairées." --ok-label "Arrêter" &
                        KDIALOG_PID=$!
                        PROCESSED_DEVICES="$PROCESSED_DEVICES $device"
                    else
                        echo "Échec de la connexion à $device, il sera réévalué ultérieurement."
                    fi
                else
                    echo "Échec du pairing pour $device, il sera réévalué ultérieurement."
                fi

                break  # Traiter une seule manette par cycle
            fi
        done
    else
        echo "Aucun appareil détecté dans le scan pour l’instant..."
        if ! kill -0 "$SCAN_PID" 2>/dev/null; then
            echo "Le scan Bluetooth est terminé (timeout atteint)."
        fi
    fi

    # Message si aucune manette détectée
    if [ "$has_controller" = false ]; then
        echo "Aucune manette active détectée pour l’instant..."
    fi

    sleep 0.5
done

echo "Script terminé."
