#!/usr/bin/bash

# Arrêter le script à la moindre erreur (sauf pour Ctrl+C)
set -e

user=$(whoami)
dossieruser="~/Windows/UserData/$user"
dxvkversion="dxvk-gplasync-v2.6.2-1"
vkd3dversion="vkd3d-proton-2.14.1"
nvapiversion="dxvk-nvapi-v0.8.0"
latencyflexversion="latencyflex-v0.1.1-2-3bc9636"
soda_version="soda-9.0-1"
soda_url="https://github.com/bottlesdevs/wine/releases/download/$soda_version/$soda_version-x86_64.tar.xz"

# Dossier temporaire pour sauvegarder les anciennes versions
temp_dir=~/.var/app/com.usebottles.bottles/data/bottles/temp_updates
mkdir -p "$temp_dir"

# Fichier drapeau pour contrôler la boucle de surveillance
flag_file="/tmp/kdialog_monitor_flag_$$"
touch "$flag_file"

# Choix entre gwine et soda avec kdialog
runner_choice=$(kdialog --title "Choix de wine" --radiolist "Sélectionnez la version de wine à utiliser :" \
    "gwine" "Gwine (dernière version)" on \
    "soda" "Soda (ancienne version)" off)

if [ $? -ne 0 ] || [ -z "$runner_choice" ]; then
    kdialog --msgbox "Aucun choix effectué, arrêt du script."
    exit 1
fi

# Récupérer la dernière version de gwine si sélectionné
if [ "$runner_choice" = "gwine" ]; then
    API_URL="https://api.github.com/repos/elgabo86/gwine/releases/latest"
    wineversion=$(curl -s $API_URL | grep '"tag_name":' | sed -E 's/.*"tag_name": "([^"]+)".*/\1/')
else
    wineversion="$soda_version"
fi

# Lancer la barre de progression avec kdialog et bouton Annuler
dbusRef=$(kdialog --title "Installation/Mise à jour de Windows" --progressbar "Initialisation..." 100)
qdbus $dbusRef showCancelButton true

# Fonction pour comparer les versions
version_newer() {
    local v1="$1" v2="$2"
    if [ "$v1" = "$v2" ]; then
        return 1 # égal
    fi
    [ "$(printf '%s\n' "$v1" "$v2" | sort -V | tail -n1)" = "$v1" ]
}

# Fonction pour gérer les erreurs, annulations ou Ctrl+C
cleanup() {
    set +e
    rm -f "$flag_file"
    if [ -n "$monitor_pid" ]; then
        kill "$monitor_pid" 2>/dev/null
        sleep 0.5
    fi
    if pgrep -f bottles > /dev/null; then
        pgrep -f bottles | xargs -n1 kill -9 &
        sleep 1
    fi
    qdbus $dbusRef setLabelText "Annulation ou erreur détectée, restauration de l'ancienne version..." 2>/dev/null
    for component in wine dxvk vkd3d nvapi latencyflex; do
        if [ -d "$temp_dir/$component" ]; then
            target_dir=""
            case $component in
                wine) target_dir=~/.var/app/com.usebottles.bottles/data/bottles/runners/ ;;
                dxvk) target_dir=~/.var/app/com.usebottles.bottles/data/bottles/dxvk/ ;;
                vkd3d) target_dir=~/.var/app/com.usebottles.bottles/data/bottles/vkd3d/ ;;
                nvapi) target_dir=~/.var/app/com.usebottles.bottles/data/bottles/nvapi/ ;;
                latencyflex) target_dir=~/.var/app/com.usebottles.bottles/data/bottles/latencyflex/ ;;
            esac
            rm -rf "$target_dir"/*
            mv "$temp_dir/$component"/* "$target_dir/"
        fi
    done
    rm -rf "$temp_dir"
    rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def
    if [ -d ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak ]; then
        mv ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def
    fi
    qdbus $dbusRef close 2>/dev/null
    kdialog --msgbox "Opération annulée ou erreur survenue. L'ancienne bouteille est restaurée." 2>/dev/null
    exit 1
}

# Capturer les erreurs et Ctrl+C
trap 'cleanup' ERR INT

# Surveiller le bouton Annuler en arrière-plan avec un fichier drapeau
(
    while [ -f "$flag_file" ]; do
        if ! qdbus $dbusRef >/dev/null 2>&1; then
            echo "Service DBus fermé, annulation détectée"
            cleanup
        fi
        cancelled=$(qdbus $dbusRef wasCancelled 2>/dev/null)
        if [ "$cancelled" = "true" ]; then
            echo "Annuler détecté via wasCancelled"
            cleanup
        fi
        sleep 1
    done
) & monitor_pid=$!

qdbus $dbusRef Set "" "value" 0
qdbus $dbusRef setLabelText "Arrêt des processus bottles..."

if pgrep -f bottles > /dev/null; then
    pgrep -f bottles | xargs -n1 kill -9 &
    sleep 2
fi

qdbus $dbusRef Set "" "value" 5
qdbus $dbusRef setLabelText "Préparation des répertoires..."
mkdir -p ~/.var/app/com.usebottles.bottles/data/bottles/bak
if [ -d ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def ]; then
    rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak
    mv ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak
fi
mkdir -p ~/.var/app/com.usebottles.bottles/data/bottles/dxvk/ ~/.var/app/com.usebottles.bottles/data/bottles/runners/ ~/.var/app/com.usebottles.bottles/data/bottles/vkd3d/ ~/.var/app/com.usebottles.bottles/data/bottles/nvapi/ ~/.var/app/com.usebottles.bottles/data/bottles/latencyflex/

# Vérification des versions actuelles
need_rebuild=false
wine_dir=~/.var/app/com.usebottles.bottles/data/bottles/runners/
dxvk_dir=~/.var/app/com.usebottles.bottles/data/bottles/dxvk/
vkd3d_dir=~/.var/app/com.usebottles.bottles/data/bottles/vkd3d/
nvapi_dir=~/.var/app/com.usebottles.bottles/data/bottles/nvapi/
latencyflex_dir=~/.var/app/com.usebottles.bottles/data/bottles/latencyflex/
bottle_yml=~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/bottle.yml

# Vérification si def.ready existe et comparaison du runner actuel avec celui dans bottle.yml
if [ ! -d ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.ready ]; then
    echo "def.ready n'existe pas, rebuild requis."
    need_rebuild=true
elif [ -f "$bottle_yml" ]; then
    current_runner=$(grep "Runner:" "$bottle_yml" | awk '{print $2}' | tr -d '"')
    echo "Runner actuel dans bottle.yml : $current_runner"
    echo "Runner choisi : $wineversion"
    if [ -n "$current_runner" ] && [ "$current_runner" != "$wineversion" ]; then
        echo "Le runner actuel ($current_runner) diffère du choisi ($wineversion), rebuild requis."
        need_rebuild=true
    else
        echo "Le runner actuel ($current_runner) est identique au choisi ($wineversion), vérification de son existence..."
        if [ ! -d "$wine_dir/$wineversion" ]; then
            echo "Le runner $wineversion n'est pas installé dans $wine_dir, téléchargement requis."
            need_rebuild=true
        else
            echo "Le runner $wineversion est déjà installé, pas de rebuild nécessaire pour ce critère."
        fi
    fi
else
    echo "bottle.yml non trouvé dans bak/def.bak/, rebuild requis par précaution."
    need_rebuild=true
fi

# Vérification et téléchargement des composants avec sauvegarde des anciennes versions
qdbus $dbusRef Set "" "value" 10
qdbus $dbusRef setLabelText "Vérification et téléchargement de Wine..."
if [ -d "$wine_dir/$wineversion" ] && [ "$need_rebuild" = false ]; then
    echo "Version exacte de $runner_choice $wineversion déjà présente et aucun rebuild requis, téléchargement ignoré."
else
    if [ -d "$wine_dir" ] && ls "$wine_dir"/* >/dev/null 2>&1; then
        current_wine=$(ls -d "$wine_dir"/* | grep -o '[a-z]*-[0-9.r-]*' | head -n1)
        if [ -n "$current_wine" ] && [ "$current_wine" != "$wineversion" ] || [ ! -d "$wine_dir/$wineversion" ]; then
            echo "Mise à jour ou réinstallation de $runner_choice vers $wineversion, sauvegarde de l'ancienne version ($current_wine) si présente..."
            mkdir -p "$temp_dir/wine"
            if [ -d "$wine_dir/$current_wine" ]; then
                mv "$wine_dir/$current_wine" "$temp_dir/wine/"
            fi
            if [ "$runner_choice" = "gwine" ]; then
                curl -L -o "$wine_dir/$wineversion.tar.xz" "https://github.com/elgabo86/gwine/releases/download/$wineversion/$wineversion.tar.xz"
                tar -xf "$wine_dir/$wineversion.tar.xz" -C "$wine_dir/"
                rm -f "$wine_dir/$wineversion.tar.xz"
            else
                # Pour Soda, extraire dans un dossier temporaire et renommer
                temp_extract_dir="$temp_dir/wine_extract"
                mkdir -p "$temp_extract_dir"
                curl -L -o "$temp_extract_dir/$soda_version.tar.xz" "$soda_url"
                tar -xf "$temp_extract_dir/$soda_version.tar.xz" -C "$temp_extract_dir/"
                mv "$temp_extract_dir/$soda_version-x86_64" "$wine_dir/$wineversion"
                rm -f "$temp_extract_dir/$soda_version.tar.xz"
                rm -rf "$temp_extract_dir"
            fi
            need_rebuild=true
        else
            echo "Version de $runner_choice $wineversion déjà présente ou plus récente, mais rebuild requis si signalé."
        fi
    else
        echo "Installation initiale de $runner_choice $wineversion..."
        if [ "$runner_choice" = "gwine" ]; then
            curl -L -o "$wine_dir/$wineversion.tar.xz" "https://github.com/elgabo86/gwine/releases/download/$wineversion/$wineversion.tar.xz"
            tar -xf "$wine_dir/$wineversion.tar.xz" -C "$wine_dir/"
            rm -f "$wine_dir/$wineversion.tar.xz"
        else
            # Pour Soda, extraire dans un dossier temporaire et renommer
            temp_extract_dir="$temp_dir/wine_extract"
            mkdir -p "$temp_extract_dir"
            curl -L -o "$temp_extract_dir/$soda_version.tar.xz" "$soda_url"
            tar -xf "$temp_extract_dir/$soda_version.tar.xz" -C "$temp_extract_dir/"
            mv "$temp_extract_dir/$soda_version-x86_64" "$wine_dir/$wineversion"
            rm -f "$temp_extract_dir/$soda_version.tar.xz"
            rm -rf "$temp_extract_dir"
        fi
        need_rebuild=true
    fi
fi

qdbus $dbusRef Set "" "value" 20
qdbus $dbusRef setLabelText "Vérification et téléchargement de DXVK..."
if [ -d "$dxvk_dir/$dxvkversion" ]; then
    echo "Version exacte de DXVK $dxvkversion déjà présente, téléchargement ignoré."
else
    if [ -d "$dxvk_dir" ] && ls "$dxvk_dir"/* >/dev/null 2>&1; then
        current_dxvk=$(ls -d "$dxvk_dir"/* | grep -o 'dxvk-gplasync-v[0-9.-]*' | head -n1)
        if [ -n "$current_dxvk" ] && version_newer "$dxvkversion" "$current_dxvk"; then
            echo "Mise à jour de DXVK vers $dxvkversion, sauvegarde de l'ancienne version ($current_dxvk)..."
            mkdir -p "$temp_dir/dxvk"
            mv "$dxvk_dir/$current_dxvk" "$temp_dir/dxvk/"
            curl -L -o "$dxvk_dir/$dxvkversion.tar.gz" "https://gitlab.com/Ph42oN/dxvk-gplasync/-/raw/main/releases/$dxvkversion.tar.gz"
            tar -xf "$dxvk_dir/$dxvkversion.tar.gz" -C "$dxvk_dir/"
            rm -f "$dxvk_dir/$dxvkversion.tar.gz"
            need_rebuild=true
        else
            echo "Version de DXVK $dxvkversion déjà présente ou plus récente, téléchargement ignoré."
        fi
    else
        echo "Installation initiale de DXVK $dxvkversion..."
        curl -L -o "$dxvk_dir/$dxvkversion.tar.gz" "https://gitlab.com/Ph42oN/dxvk-gplasync/-/raw/main/releases/$dxvkversion.tar.gz"
        tar -xf "$dxvk_dir/$dxvkversion.tar.gz" -C "$dxvk_dir/"
        rm -f "$dxvk_dir/$dxvkversion.tar.gz"
        need_rebuild=true
    fi
fi

qdbus $dbusRef Set "" "value" 30
qdbus $dbusRef setLabelText "Vérification et téléchargement de VKD3D..."
if [ -d "$vkd3d_dir/$vkd3dversion" ]; then
    echo "Version exacte de VKD3D $vkd3dversion déjà présente, téléchargement ignoré."
else
    if [ -d "$vkd3d_dir" ] && ls "$vkd3d_dir"/* >/dev/null 2>&1; then
        current_vkd3d=$(ls -d "$vkd3d_dir"/* | grep -o 'vkd3d-proton-[0-9.-]*' | head -n1)
        if [ -n "$current_vkd3d" ] && version_newer "$vkd3dversion" "$current_vkd3d"; then
            echo "Mise à jour de VKD3D vers $vkd3dversion, sauvegarde de l'ancienne version ($current_vkd3d)..."
            mkdir -p "$temp_dir/vkd3d"
            mv "$vkd3d_dir/$current_vkd3d" "$temp_dir/vkd3d/"
            curl -L -o "$vkd3d_dir/$vkd3dversion.tar.zst" "https://github.com/HansKristian-Work/vkd3d-proton/releases/download/v2.14.1/$vkd3dversion.tar.zst"
            tar -xf "$vkd3d_dir/$vkd3dversion.tar.zst" -C "$vkd3d_dir/"
            rm -f "$vkd3d_dir/$vkd3dversion.tar.zst"
            need_rebuild=true
        else
            echo "Version de VKD3D $vkd3dversion déjà présente ou plus récente, téléchargement ignoré."
        fi
    else
        echo "Installation initiale de VKD3D $vkd3dversion..."
        curl -L -o "$vkd3d_dir/$vkd3dversion.tar.zst" "https://github.com/HansKristian-Work/vkd3d-proton/releases/download/v2.14.1/$vkd3dversion.tar.zst"
        tar -xf "$vkd3d_dir/$vkd3dversion.tar.zst" -C "$vkd3d_dir/"
        rm -f "$vkd3d_dir/$vkd3dversion.tar.zst"
        need_rebuild=true
    fi
fi

qdbus $dbusRef Set "" "value" 40
qdbus $dbusRef setLabelText "Vérification et téléchargement de NVAPI..."
if [ -d "$nvapi_dir/$nvapiversion" ]; then
    echo "Version exacte de dxvk-nvapi $nvapiversion déjà présente, téléchargement ignoré."
else
    if [ -d "$nvapi_dir" ] && ls "$nvapi_dir"/* >/dev/null 2>&1; then
        current_nvapi=$(ls -d "$nvapi_dir"/* | grep -o 'dxvk-nvapi-v[0-9.-]*' | head -n1)
        if [ -n "$current_nvapi" ] && version_newer "$nvapiversion" "$current_nvapi"; then
            echo "Mise à jour de dxvk-nvapi vers $nvapiversion, sauvegarde de l'ancienne version ($current_nvapi)..."
            mkdir -p "$temp_dir/nvapi"
            mv "$nvapi_dir/$current_nvapi" "$temp_dir/nvapi/"
            curl -L -o "$nvapi_dir/$nvapiversion.tar.gz" "https://github.com/bottlesdevs/components/releases/download/$nvapiversion/$nvapiversion.tar.gz"
            tar -xf "$nvapi_dir/$nvapiversion.tar.gz" -C "$nvapi_dir/"
            rm -f "$nvapi_dir/$nvapiversion.tar.gz"
            need_rebuild=true
        else
            echo "Version de dxvk-nvapi $nvapiversion déjà présente ou plus récente, téléchargement ignoré."
        fi
    else
        echo "Installation initiale de dxvk-nvapi $nvapiversion..."
        curl -L -o "$nvapi_dir/$nvapiversion.tar.gz" "https://github.com/bottlesdevs/components/releases/download/$nvapiversion/$nvapiversion.tar.gz"
        tar -xf "$nvapi_dir/$nvapiversion.tar.gz" -C "$nvapi_dir/"
        rm -f "$nvapi_dir/$nvapiversion.tar.gz"
        need_rebuild=true
    fi
fi

qdbus $dbusRef Set "" "value" 50
qdbus $dbusRef setLabelText "Vérification et téléchargement de LatencyFlex..."
if [ -d "$latencyflex_dir/$latencyflexversion" ]; then
    echo "Version exacte de LatencyFlex $latencyflexversion déjà présente, téléchargement ignoré."
else
    if [ -d "$latencyflex_dir" ] && ls "$latencyflex_dir"/* >/dev/null 2>&1; then
        current_latencyflex=$(ls -d "$latencyflex_dir"/* | grep -o 'latencyflex-v[0-9.-]*[-a-z0-9]*' | head -n1)
        if [ -n "$current_latencyflex" ] && version_newer "$latencyflexversion" "$current_latencyflex"; then
            echo "Mise à jour de LatencyFlex vers $latencyflexversion, sauvegarde de l'ancienne version ($current_latencyflex)..."
            mkdir -p "$temp_dir/latencyflex"
            mv "$latencyflex_dir/$current_latencyflex" "$temp_dir/latencyflex/"
            curl -L -o "$latencyflex_dir/$latencyflexversion.tar.gz" "https://github.com/bottlesdevs/components/releases/download/$latencyflexversion/$latencyflexversion.tar.gz"
            tar -xf "$latencyflex_dir/$latencyflexversion.tar.gz" -C "$latencyflex_dir/"
            rm -f "$latencyflex_dir/$latencyflexversion.tar.gz"
            need_rebuild=true
        else
            echo "Version de LatencyFlex $latencyflexversion déjà présente ou plus récente, téléchargement ignoré."
        fi
    else
        echo "Installation initiale de LatencyFlex $latencyflexversion..."
        curl -L -o "$latencyflex_dir/$latencyflexversion.tar.gz" "https://github.com/bottlesdevs/components/releases/download/$latencyflexversion/$latencyflexversion.tar.gz"
        tar -xf "$latencyflex_dir/$latencyflexversion.tar.gz" -C "$latencyflex_dir/"
        rm -f "$latencyflex_dir/$latencyflexversion.tar.gz"
        need_rebuild=true
    fi
fi

if [ "$need_rebuild" = false ]; then
    qdbus $dbusRef Set "" "value" 60
    qdbus $dbusRef setLabelText "Restauration de la bouteille prête depuis bak/def.ready..."
    rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def
    cp -r ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.ready ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def

    qdbus $dbusRef Set "" "value" 70
    qdbus $dbusRef setLabelText "Récupération des données de l'ancienne configuration..."
    for dir in cache grids icons; do
        if [ -d ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/$dir ]; then
            rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/$dir
            mv ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/$dir ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/
        fi
    done

    qdbus $dbusRef Set "" "value" 80
    qdbus $dbusRef setLabelText "Récupération des programmes externes..."
    if [ -f ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/bottle.yml ] && [ -f ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/bottle.yml ]; then
        python3 - <<EOF
import yaml
import os

source_file = os.path.expanduser('~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/bottle.yml')
target_file = os.path.expanduser('~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/bottle.yml')

with open(source_file, 'r') as file:
    source_data = yaml.safe_load(file)
external_programs = source_data.get('External_Programs', {})

with open(target_file, 'r') as file:
    target_data = yaml.safe_load(file)
target_data['External_Programs'] = external_programs

with open(target_file, 'w') as file:
    yaml.safe_dump(target_data, file, default_flow_style=False, allow_unicode=True)
EOF
    fi

    rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak
    rm -rf "$temp_dir"
    qdbus $dbusRef Set "" "value" 100
    qdbus $dbusRef setLabelText "Finalisation..."
    qdbus $dbusRef close 2>/dev/null
    rm -f "$flag_file"
    if [ -n "$monitor_pid" ]; then
        kill "$monitor_pid" 2>/dev/null
        sleep 0.5
    fi
    kdialog --msgbox "L'installation/mise à jour de Windows est réussie." 2>/dev/null
    exit 0
fi

if [ "$need_rebuild" = true ]; then
    qdbus $dbusRef Set "" "value" 60
    qdbus $dbusRef setLabelText "Configuration de Bottles..."
    flatpak run --command=bottles-cli com.usebottles.bottles new --bottle-name "def" --runner "$wineversion" --environment gaming
    flatpak override com.usebottles.bottles --user --filesystem=~/Windows
    mkdir -p ~/Windows/UserData ~/Windows/SteamData ~/Windows/Games ~/Windows/Applications ~/Windows/Tools ~/.local/share/applications/
    rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/drive_c/users/
    ln -s ~/Windows/UserData/ ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/drive_c/users
    ln -s ~/Windows/SteamData/ ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/drive_c/ProgramData/Steam
    ln -s ~/Windows/Applications/ ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/drive_c/
    ln -s ~/Windows/Games/ ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/drive_c/
    ln -f -s -T ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/drive_c/ ~/Windows/WinDrive

    qdbus $dbusRef Set "" "value" 70
    qdbus $dbusRef setLabelText "Ajout des clés de registre..."
    flatpak run --command=bottles-cli com.usebottles.bottles reg add -b def -k "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\winebus" -v "Enable SDL" -d 1 -t "REG_DWORD"
    flatpak run --command=bottles-cli com.usebottles.bottles reg add -b def -k "HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\winebus" -v "DisableHidraw" -d 1 -t "REG_DWORD"
    flatpak run --command=bottles-cli com.usebottles.bottles reg add -b def -k "HKEY_CURRENT_USER\Software\Wine\Drivers" -v "Graphics" -d "X11" -t "REG_SZ"

    # Désactiver coremessaging.dll (fix wine proton)
    flatpak run --command=bottles-cli com.usebottles.bottles reg add -b def -k "HKEY_CURRENT_USER\Software\Wine\DllOverrides" -v "coremessaging" -d "" -t "REG_SZ"

    qdbus $dbusRef Set "" "value" 80
    qdbus $dbusRef setLabelText "Configuration des raccourcis et outils..."
    cp /usr/share/ublue-os/gablue/desktops/com.usebottles.bottles.desktop ~/.local/share/applications/
    cp /usr/share/ublue-os/gablue/desktops/Windows.desktop ~/.local/share/applications/
    cp /usr/share/ublue-os/gablue/desktops/WindowsFix.desktop ~/.local/share/applications/
    cp /usr/share/ublue-os/gablue/desktops/WindowsTerminal.desktop ~/.local/share/applications/
    cp /usr/share/ublue-os/gablue/desktops/KillWindows.desktop ~/.local/share/applications/
    mkdir -p ~/.local/share/kio/servicemenus/
    cp /usr/share/ublue-os/gablue/desktops/servicemenus/CreateWinShortcut.desktop ~/.local/share/kio/servicemenus/
    cp /usr/share/ublue-os/gablue/desktops/servicemenus/InstallWinReg.desktop ~/.local/share/kio/servicemenus/
    update-desktop-database ~/.local/share/applications
    xdg-mime default Windows.desktop application/x-ms-dos-executable
    xdg-mime default Windows.desktop application/x-msi
    xdg-mime default Windows.desktop application/x-ms-shortcut
    xdg-mime default Windows.desktop application/x-wine-extension-msp
    xdg-mime default Windows.desktop application/x-bat
    rm -rf ~/Windows/Tools/*
    if [ ! -f ~/Windows/Tools/winetricks ]; then
        wget -O ~/Windows/Tools/winetricks https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks
        chmod +x ~/Windows/Tools/winetricks
    fi

    qdbus $dbusRef Set "" "value" 85
    qdbus $dbusRef setLabelText "Installation des runtimes..."
    flatpak run --env=WINEPREFIX=/var/data/bottles/bottles/def --env=WINE=/var/data/bottles/runners/"$wineversion"/bin/wine --command=/var/home/$user/Windows/Tools/winetricks com.usebottles.bottles -q \
        corefonts \
        tahoma \
        d3dcompiler_42 \
        d3dcompiler_43 \
        d3dcompiler_47 \
        d3dx9 \
        msls31 \
        vb6run \
        mfc42 \
        physx \
        vcrun2010 \
        vcrun2012 \
        vcrun2013 \
        vcrun2022 \
        dotnetdesktop6 \
        dotnetdesktop7 \
        dotnetdesktop8
    flatpak run --env=WINEPREFIX=/var/data/bottles/bottles/def --env=WINE=/var/data/bottles/runners/"$wineversion"/bin/wine --command=/var/home/$user/Windows/Tools/winetricks com.usebottles.bottles -q settings fontsmooth=rgb

    qdbus $dbusRef Set "" "value" 90
    qdbus $dbusRef setLabelText "Finalisation des runtimes et configuration..."
    flatpak install runtime/org.freedesktop.Platform.VulkanLayer.MangoHud/x86_64/24.08 -y
    flatpak install runtime/com.obsproject.Studio.Plugin.OBSVkCapture/x86_64/stable -y
    flatpak install runtime/org.freedesktop.Platform.VulkanLayer.OBSVkCapture/x86_64/24.08 -y
    flatpak install runtime/org.freedesktop.Platform.VulkanLayer.gamescope/x86_64/24.08 -y
    mkdir -p ~/.config/MangoHud/
    cp /usr/share/ublue-os/gablue/MangoHud.conf ~/.config/MangoHud/
    flatpak run --command=bottles-cli com.usebottles.bottles edit -b def --params mangohud:true
    flatpak run --command=bottles-cli com.usebottles.bottles edit -b def --params gamemode:true
    mkdir -p ~/Windows/UserData/Public/Documents/Steam/

    if [ -e "$dossieruser" ]; then
        if [ ! -e "~/Windows/UserData/steamuser" ]; then
            ln -s "./$user" "~/Windows/UserData/steamuser"
        fi
    else
        if [ -e "~/Windows/UserData/steamuser" ]; then
            ln -s "./steamuser" "$dossieruser"
        fi
    fi

    qdbus $dbusRef Set "" "value" 95
    qdbus $dbusRef setLabelText "Récupération des données de l'ancienne configuration..."
    for dir in cache grids icons; do
        if [ -d ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/$dir ]; then
            rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/$dir
            mv ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/$dir ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/
        fi
    done

    qdbus $dbusRef setLabelText "Récupération des programmes externes..."
    if [ -f ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/bottle.yml ] && [ -f ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/bottle.yml ]; then
        python3 - <<EOF
import yaml
import os

source_file = os.path.expanduser('~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak/bottle.yml')
target_file = os.path.expanduser('~/.var/app/com.usebottles.bottles/data/bottles/bottles/def/bottle.yml')

with open(source_file, 'r') as file:
    source_data = yaml.safe_load(file)
external_programs = source_data.get('External_Programs', {})

with open(target_file, 'r') as file:
    target_data = yaml.safe_load(file)
target_data['External_Programs'] = external_programs

with open(target_file, 'w') as file:
    yaml.safe_dump(target_data, file, default_flow_style=False, allow_unicode=True)
EOF
    fi

    rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.bak
    qdbus $dbusRef setLabelText "Création de la bouteille prête (bak/def.ready)..."
    rm -rf ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.ready
    cp -r ~/.var/app/com.usebottles.bottles/data/bottles/bottles/def ~/.var/app/com.usebottles.bottles/data/bottles/bak/def.ready
fi

rm -rf "$temp_dir"
qdbus $dbusRef Set "" "value" 100
qdbus $dbusRef setLabelText "Finalisation..."
qdbus $dbusRef close 2>/dev/null
rm -f "$flag_file"
if [ -n "$monitor_pid" ]; then
    kill "$monitor_pid" 2>/dev/null
    sleep 0.5
fi
if [ -f ~/.var/app/com.usebottles.bottles/data/bottles/library.yml ]; then
    /usr/bin/bottles-sort-library
fi
kdialog --msgbox "L'installation/mise à jour de Windows est réussie." 2>/dev/null
rm -f "$flag_file"
