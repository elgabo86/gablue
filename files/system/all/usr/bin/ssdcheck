#!/bin/bash

# Script pour afficher des infos sur la sant√© de tous les SSD
# Version : 4.1 (2025-04-15) - Release finale, syntaxe corrig√©e

# V√©rifier si l'utilisateur a les privil√®ges root
if [ "$(id -u)" -ne 0 ]; then
    echo "Ce script n√©cessite des privil√®ges root. Relance avec sudo..."
    exec sudo "$0" "$@"
fi

echo "Ex√©cution de ssdcheck (Version 4.1)"

# V√©rifier si smartctl est install√©
if ! command -v smartctl >/dev/null 2>&1; then
    echo "Erreur : smartctl n'est pas install√©. Installez smartmontools."
    echo "Sur Ubuntu/Debian : sudo apt install smartmontools"
    echo "Sur Fedora : sudo dnf install smartmontools"
    exit 1
fi

# V√©rifier si bc est install√©
if ! command -v bc >/dev/null 2>&1; then
    echo "Erreur : bc n'est pas install√©. Installez-le avec :"
    echo "Sur Ubuntu/Debian : sudo apt install bc"
    echo "Sur Fedora : sudo dnf install bc"
    exit 1
fi

# Fonction pour convertir les unit√©s en t√©raoctets
convert_to_tb() {
    local units="$1"
    local unit_type="$2"
    units=$(echo "$units" | tr -cd '0-9')
    if [ -z "$units" ]; then
        echo "N/A"
    else
        if [ "$unit_type" = "sectors" ]; then
            echo "scale=1; ($units * 512) / 1000000000000" | bc
        else
            echo "scale=1; ($units * 512) / 1000000000" | bc
        fi
    fi
}

# Fonction pour convertir heures en jours/mois/ann√©es
convert_time() {
    local hours="$1"
    hours=$(echo "$hours" | tr -cd '0-9')
    if [ -z "$hours" ] || [ "$hours" -eq 0 ]; then
        echo "N/A"
        return
    fi
    local days=$(echo "scale=0; $hours / 24" | bc)
    local months=$(echo "scale=0; $days / 30" | bc)
    local years=$(echo "scale=0; $months / 12" | bc)
    local time_str="${hours} h"
    if [ "$days" -gt 0 ]; then
        time_str="$time_str (~${days} jour$([ "$days" -ne 1 ] && echo "s"))"
    fi
    if [ "$months" -gt 0 ]; then
        time_str="$time_str (~${months} mois)"
    fi
    if [ "$years" -gt 0 ]; then
        time_str="$time_str (~${years} an$([ "$years" -ne 1 ] && echo "s"))"
    fi
    echo "$time_str"
}

# Trouver tous les disques physiques
DISKS=$(lsblk -d -o NAME,TYPE,MODEL | grep -E "disk.*(SSD|NVMe|Samsung)" | awk '{print "/dev/"$1}' | sort -u)
if [ -z "$DISKS" ]; then
    echo "Aucun SSD d√©tect√© sur ce syst√®me."
    exit 1
fi

# Boucle sur chaque disque
for DISK in $DISKS; do
    if [ ! -b "$DISK" ]; then
        echo "Erreur : Le disque $DISK n'existe pas."
        continue
    fi

    IS_SAMSUNG=false
    if lsblk -d -o MODEL "$DISK" | grep -q "Samsung"; then
        IS_SAMSUNG=true
    fi

    IS_USB=false
    if udevadm info --query=property --name="$DISK" | grep -q "ID_BUS=usb"; then
        IS_USB=true
    fi

    SMART_OUTPUT=""
    if [ "$IS_SAMSUNG" = "true" ] && ! echo "$DISK" | grep -q "nvme"; then
        SMART_OUTPUT=$(sudo smartctl -a "$DISK" -d sat 2>/dev/null | tr -d '\r' | sed 's/[ \t]\+/ /g')
        if ! echo "$SMART_OUTPUT" | grep -q -E "SMART.*overall-health|Model Number|Device Model|Rotation Rate:.*Solid"; then
            SMART_OUTPUT=$(sudo smartctl -a "$DISK" -d auto 2>/dev/null | tr -d '\r' | sed 's/[ \t]\+/ /g')
            if ! echo "$SMART_OUTPUT" | grep -q -E "SMART.*overall-health|Model Number|Device Model|Rotation Rate:.*Solid"; then
                echo "Erreur : Disque $DISK non support√© (aucune donn√©e SMART valide)."
                continue
            fi
        fi
    elif [ "$IS_USB" = "true" ]; then
        for PROTO in "nvme" "auto"; do
            SMART_OUTPUT=$(sudo smartctl -a "$DISK" -d "$PROTO" 2>/dev/null | tr -d '\r' | sed 's/[ \t]\+/ /g')
            if echo "$SMART_OUTPUT" | grep -q -E "SMART.*overall-health|Model Number|Device Model|Rotation Rate:.*Solid"; then
                break
            fi
            SMART_OUTPUT=""
        done
        if [ -z "$SMART_OUTPUT" ]; then
            echo "Erreur : Disque USB $DISK non support√©."
            continue
        fi
    else
        SMART_OUTPUT=$(sudo smartctl -a "$DISK" 2>/dev/null | tr -d '\r' | sed 's/[ \t]\+/ /g')
        if ! echo "$SMART_OUTPUT" | grep -q -E "SMART.*overall-health|Model Number|Device Model|Rotation Rate:.*Solid"; then
            echo "Erreur : Aucune donn√©e SMART valide pour $DISK."
            continue
        fi
    fi

    IS_SSD=false
    if echo "$DISK" | grep -q "nvme"; then
        IS_SSD=true
    elif echo "$SMART_OUTPUT" | grep -q -E "Solid State Device|Percentage Used|Wear_Leveling_Count|Rotation Rate:.*Solid"; then
        IS_SSD=true
    fi

    if [ "$IS_SSD" != "true" ]; then
        echo "Le disque $DISK n'est pas un SSD, ignor√©."
        continue
    fi

    MODEL=$(echo "$SMART_OUTPUT" | grep -E "Model Number|Device Model" | head -1 | cut -d':' -f2- | awk '{$1=$1};1')

    PERCENTAGE_USED="N/A"
    if echo "$SMART_OUTPUT" | grep -q "Percentage Used"; then
        PERCENTAGE_USED=$(echo "$SMART_OUTPUT" | grep "Percentage Used" | awk '{print $3}' | tr -d '%')
    elif echo "$SMART_OUTPUT" | grep -q "Wear_Leveling_Count"; then
        PERCENTAGE_USED=$(echo "$SMART_OUTPUT" | awk '/Wear_Leveling_Count/ {print $NF}')
    fi

    DATA_UNITS_READ=$(echo "$SMART_OUTPUT" | grep "Data Units Read" | grep -o "[0-9][0-9‚Äô]*" | head -1 | tr -cd '0-9' || echo "0")
    DATA_UNITS_WRITTEN=$(echo "$SMART_OUTPUT" | grep "Data Units Written" | grep -o "[0-9][0-9‚Äô]*" | head -1 | tr -cd '0-9' || echo "0")
    TOTAL_LBAS_WRITTEN="0"
    GREP_OUTPUT=$(echo "$SMART_OUTPUT" | grep "Total_LBAs_Written")
    if [ -n "$GREP_OUTPUT" ]; then
        TOTAL_LBAS_WRITTEN=$(echo "$GREP_OUTPUT" | awk '{print $NF}' | tr -cd '0-9')
        if [ -z "$TOTAL_LBAS_WRITTEN" ]; then
            TOTAL_LBAS_WRITTEN="0"
        fi
    fi
    POWER_CYCLES=$(echo "$SMART_OUTPUT" | grep -E "Power_Cycle_Count|Power Cycles" | awk '{print $NF}' | tr -cd '0-9' || echo "N/A")
    POWER_ON_HOURS=$(echo "$SMART_OUTPUT" | grep -E "Power_On_Hours|Power On Hours" | awk '{print $NF}' | tr -cd '0-9' || echo "N/A")

    if [ -n "$DATA_UNITS_READ" ] && [ "$DATA_UNITS_READ" != "0" ]; then
        TOTAL_READ_TB=$(convert_to_tb "$DATA_UNITS_READ" "blocks")
    else
        TOTAL_READ_TB="N/A"
    fi
    if [ -n "$DATA_UNITS_WRITTEN" ] && [ "$DATA_UNITS_WRITTEN" != "0" ]; then
        TOTAL_WRITTEN_TB=$(convert_to_tb "$DATA_UNITS_WRITTEN" "blocks")
    elif [ -n "$TOTAL_LBAS_WRITTEN" ] && [ "$TOTAL_LBAS_WRITTEN" != "0" ]; then
        TOTAL_WRITTEN_TB=$(convert_to_tb "$TOTAL_LBAS_WRITTEN" "sectors")
    else
        TOTAL_WRITTEN_TB="N/A"
    fi

    TIME_DISPLAY=$(convert_time "$POWER_ON_HOURS")

    echo -e "\033[1;34m========================================\033[0m"
    echo -e "\033[1;33mSant√© du SSD : $DISK ($MODEL)\033[0m"
    echo -e "\033[1;34m========================================\033[0m"
    echo -e "Usure : \033[1;31m${PERCENTAGE_USED}%\033[0m"
    echo -e "Lectures totales : \033[1;36m${TOTAL_READ_TB} To\033[0m"
    echo -e "√âcritures totales : \033[1;36m${TOTAL_WRITTEN_TB} To\033[0m"
    echo -e "Cycles d'allumage : \033[1;36m${POWER_CYCLES}\033[0m"
    echo -e "Heures allum√© : \033[1;36m${TIME_DISPLAY}\033[0m"
    echo -e "\033[1;34m========================================\033[0m"

    if [ "$PERCENTAGE_USED" != "N/A" ] && [ -n "$PERCENTAGE_USED" ]; then
        if [ "$PERCENTAGE_USED" -le 10 ]; then
            echo -e "\033[1;32mCe SSD est presque comme neuf ! üòä\033[0m"
        elif [ "$PERCENTAGE_USED" -le 50 ]; then
            echo -e "\033[1;32mCe SSD est encore en bonne sant√©.\033[0m"
        elif [ "$PERCENTAGE_USED" -le 80 ]; then
            echo -e "\033[1;33mL'usure commence √† √™tre notable, mais pas d'urgence.\033[0m"
        else
            echo -e "\033[1;31mAttention : Ce SSD est tr√®s us√©, pense √† un remplacement.\033[0m"
        fi
    else
        echo -e "\033[1;33mDonn√©es d'usure non disponibles pour ce SSD.\033[0m"
    fi
    echo ""
done
